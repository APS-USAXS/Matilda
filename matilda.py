# this file will process bunch of Flyscan data files.
# to run setup proper conda environment and run the following command:
# python processFlyscans.py
# this will process the data files and generate a plot of UPD vs. Q
# the test data files are located in the directory: /home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs

from convertflyscan import reduceFlyscanToQR
from readfromtiled import FindLastScanData
import matplotlib.pyplot as plt
import pprint as pp
import numpy as np
import socket
import logging
from logging.handlers import RotatingFileHandler
import time


# list of files will be generated as a list of lists
# each list will have two items: path and file name
# this will be used to process the data files  
# this is example of how the lists looks like:
# [['/share1/USAXS_data/2025-02/02_14_AMB4_800C/02_14_AMB4_800C_usaxs', 'AMB4_800C_71min_0564.h5'], 
#   ['/share1/USAXS_data/2025-02/02_14_AMB4_800C/02_14_AMB4_800C_usaxs', 'AMB4_800C_73min_0565.h5'], 
#  ]
# this list will be generated by the function below

BeruskaListOfFlyScans = [['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','HeaterBlank_0060.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PPOH_225C_3_0069.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PPOH_25C_orig_0066.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PU_25C_2_0063.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PPOH_25C_2_0068.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PU_225C_1_0062.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PU_25C_4_0065.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PPOH_225C_1_0067.h5'],
            ] 

BeruskaListOfStepScans = [['/home/parallels/Documents/02_21_Megan/step','AirBlank_300pts_0110.h5'],
                ['/home/parallels/Documents/02_21_Megan/step','AirBlank_300pts_0111.h5'],
                ['/home/parallels/Documents/02_21_Megan/step','AirBlank_300pts_0113.h5'],
                ['/home/parallels/Documents/02_21_Megan/step','SRM3607_300pts_0097.h5'],
                ['/home/parallels/Documents/02_21_Megan/step','SRM3607_300pts_0098.h5'],
                ['/home/parallels/Documents/02_21_Megan/step','SRM3607_300pts_0099.h5'],
            ]

BeruskaListOfSAXSScans = [['/home/parallels/Documents/02_21_Megan/02_21_Megan_saxs','HeaterBlank_0060.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_saxs','PPOH_225C_3_0069.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_saxs','PPOH_25C_orig_0066.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_saxs','PU_25C_2_0063.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_saxs','PPOH_25C_2_0068.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_saxs','PU_225C_1_0062.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_saxs','PU_25C_4_0065.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_saxs','PPOH_225C_1_0067.hdf'],
            ] 

BeruskaListOfWAXSScans = [['/home/parallels/Documents/02_21_Megan/02_21_Megan_waxs','HeaterBlank_0060.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_waxs','PPOH_225C_3_0069.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_waxs','PPOH_25C_orig_0066.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_waxs','PU_25C_2_0063.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_waxs','PPOH_25C_2_0068.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_waxs','PU_225C_1_0062.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_waxs','PU_25C_4_0065.hdf'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_waxs','PPOH_225C_1_0067.hdf'],
            ] 

#print(f"List of Scans: {ListOfScans=}")
#ListOfTiledScans = FindLastFSdata()
#print(f"List of Flyscans: {ListOfTiledScans=}")


# Configure logging
handler = RotatingFileHandler('matilda.log', maxBytes=200000, backupCount=1)
logging.basicConfig(
    handlers=[handler],
    level=logging.DEBUG,        # Set the logging level
    format='%(asctime)s - %(levelname)s - %(message)s',  # Format of the log messages
    datefmt='%Y-%m-%d %H:%M:%S'  # Date format
)

# # Log messages
# logging.debug('This is a debug message')
# logging.info('This is an info message')
# logging.warning('This is a warning message')
# logging.error('This is an error message')
# logging.critical('This is a critical message')

def GetListOfScans(plan_name):
    #Get the hostname of the current machine
    current_hostname = socket.gethostname()
    #print(f"Current hostname: {current_hostname}")
    logging.info(f"Current hostname: {current_hostname}")

    # Check if the current machine is 'usaxscontrol'
    if current_hostname == 'usaxscontrol':
        # Place the code block you want to execute here
        print("Executing code on usaxscontrol")
        return FindLastScanData(plan_name,10)
    else:
        if plan_name == 'SAXS':
            return BeruskaListOfSAXSScans
        elif plan_name == 'WAXS':
            return BeruskaListOfWAXSScans
        elif plan_name == 'uascan':
            return BeruskaListOfStepScans
        else:               #flyscans are default
            return BeruskaListOfFlyScans


    
#
# Process the Flyscan data files
def processFlyscans(ListOfScans):
    results=[]
    for scan in ListOfScans:
        path = scan[0]
        filename = scan[1]
        #print(f"Processing file: {filename}")
        results.append(reduceFlyscanToQR(path, filename))
    #print("Done processing the Flyscans")
    return results

def plotUSAXSResults(ListOfresults):  
    # Number of data sets
    num_data_sets = len(ListOfresults)
    # Choose a colormap
    cmap = plt.get_cmap('viridis')
    # Generate colors from the colormap
    colors = [cmap(i) for i in np.linspace(0, 1, num_data_sets)]

    # Plot each x-y pair with a different color and label
    #for (label, (x, y)), color in zip(ListOfresults.items(), colors):
    #    plt.plot(x, y, color=color, label=label)

    # Plot ydata against xdata
    plt.figure(figsize=(6, 12))
    for i, color in zip(range(len(ListOfresults)),colors):
        data_dict = ListOfresults[i]
        label = data_dict["RawData"]["Filename"]
        Q_array = data_dict["ReducedData"]["Q_array"]
        UPD = data_dict["ReducedData"]["UPD"]
        plt.plot(Q_array, UPD, color=color, linestyle='-', label=label)  # You can customize the marker and linestyle
    
    plt.title('Plot of UPD vs. Q')
    plt.xlabel('log(Q) [1/A]')
    plt.ylabel('UPD')
    plt.xscale('log')
    plt.yscale('log')
    plt.xlim(1e-5, 1)
    plt.grid(True)
    # Add legend
    plt.legend()
    # Save the plot as a JPEG image
    plt.savefig('usaxs.jpg', format='jpg', dpi=300)
    #plt.show()

if __name__ == "__main__":
    #these are calls to get last 10 scans for Flyscan, SAXS and WAXS
    #print (FindLastScanData("Flyscan",10))
    #print (FindLastScanData("uascan",10))
    #print (FindLastScanData("SAXS",10))
    #print (FindLastScanData("WAXS",10))
    # this has been shown to work
    try:
        while True:
            print("Processing the Flyscans")
            ListOfScans = GetListOfScans("Flyscan")
            ListOfresults = processFlyscans(ListOfScans)
            plotUSAXSResults(ListOfresults)
            print("Done processing the Flyscans")
            time.sleep(30)
    except KeyboardInterrupt:
        print("Keyboard interrupt")