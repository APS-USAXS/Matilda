# this file will process bunch of Flyscan data files.


from ReadFlyscan import ProcessFlyscan
from ReadTiled import FindLastFSdata
import matplotlib.pyplot as plt
import pprint as pp
import numpy as np

# list of files will be generated as a list of lists
# each list will have two items: path and file name
# this will be used to process the data files  
# this is example of how the lists looks like:
# [['/share1/USAXS_data/2025-02/02_14_AMB4_800C/02_14_AMB4_800C_usaxs', 'AMB4_800C_71min_0564.h5'], 
#   ['/share1/USAXS_data/2025-02/02_14_AMB4_800C/02_14_AMB4_800C_usaxs', 'AMB4_800C_73min_0565.h5'], 
#  ]
# this list will be generated by the function below

ListOfScans = [['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','HeaterBlank_0060.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PPOH_225C_3_0069.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PPOH_25C_orig_0066.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PU_25C_2_0063.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PPOH_25C_2_0068.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PU_225C_1_0062.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PU_25C_4_0065.h5'],
               ['/home/parallels/Documents/02_21_Megan/02_21_Megan_usaxs','PPOH_225C_1_0067.h5'],
            ] 

#print(f"List of Scans: {ListOfScans=}")
#ListOfTiledScans = FindLastFSdata()
#print(f"List of Flyscans: {ListOfTiledScans=}")


# Process the Flyscan data files
def ProcessFlyscans():
    results=[]
    for scan in ListOfScans:
        path = scan[0]
        filename = scan[1]
        #print(f"Processing file: {filename}")
        results.append(ProcessFlyscan(path, filename))
    #print("Done processing the Flyscans")
    return results

def PlotResults(ListOfresults):
    
    # Number of data sets
    num_data_sets = len(ListOfresults)
    # Choose a colormap
    cmap = plt.get_cmap('viridis')
    # Generate colors from the colormap
    colors = [cmap(i) for i in np.linspace(0, 1, num_data_sets)]

    # Plot each x-y pair with a different color and label
    #for (label, (x, y)), color in zip(ListOfresults.items(), colors):
    #    plt.plot(x, y, color=color, label=label)

    # Plot ydata against xdata
    plt.figure(figsize=(6, 12))
    for i, color in zip(range(len(ListOfresults)),colors):
        data_dict = ListOfresults[i]
        label = data_dict["RawData"]["Filename"]
        Q_array = data_dict["ReducedData"]["Q_array"]
        UPD = data_dict["ReducedData"]["UPD"]
        plt.plot(Q_array, UPD, color=color, linestyle='-', label=label)  # You can customize the marker and linestyle
    
    plt.title('Plot of UPD vs. Q')
    plt.xlabel('log(Q) [1/A]')
    plt.ylabel('UPD')
    plt.xscale('log')
    plt.yscale('log')
    plt.xlim(1e-5, 1)
    plt.grid(True)
    # Add legend
    plt.legend()
    # Save the plot as a JPEG image
    #plt.savefig('usaxs.jpg', format='jpg', dpi=300)
    plt.show()

#if __file__ == "__main__":
ListOfresults = ProcessFlyscans()
PlotResults(ListOfresults)
#pp.pprint(ListOfresults)
# for result in ListOfresults:
#     PlotResults(result)
print("Done processing the Flyscans")